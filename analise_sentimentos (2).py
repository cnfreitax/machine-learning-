# -*- coding: utf-8 -*-
"""analise_sentimentos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n680__HamIcei3jvQWzYV1rdrEopOg4M
"""

import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer
import csv

resenha = pd.read_csv('imdb-reviews-pt-br.csv', error_bad_lines=False)
resenha

classificacao = resenha['sentiment'].replace(['neg', 'pos'], [0, 1])
resenha['classificacao'] = classificacao
resenha

#for column in resenha.columns:
#   if resenha[column].dtype == type(object):
#       le = preprocessing.LabelEncoder()
#        resenha[column] = le.fit_transform(resenha[column])

from sklearn.model_selection import train_test_split
treino, teste, classe_treino, classe_teste = train_test_split(resenha.text_pt,
                                                              resenha.classificacao,
                                                              random_state = 45
                                                              
                                                              )
treino = np.array(treino).reshape(len(treino),1)
teste = np.array(teste).reshape(len(teste),1)

regressao_logistica = LogisticRegression()
regressao_logistica.fit(treino, classe_treino)
regressao_logistica.score(treino, classe_treino)

"""## selecionar todos os comentários e vetorizá-los. Depois é necessário dividir os dados em treino e teste para então determinar um método de classificação que trabalhe bem com dados esparsos. Por fim, deve-se treinar o classificador escolhido, realizar a previsão e medir os dados de teste."""

vetorizar = CountVectorizer(lowercase=False, max_features=50)
bag_of_words = vetorizar.fit_transform(resenha.text_pt)
print(bag_of_words.shape)

def classifica_texto(texto, coluna_interesse, coluna_classificacao):
    vetorizar = CountVectorizer(lowercase=False, max_features=50)
    bag_of_words = vetorizar.fit_transform(texto[coluna_interesse])
    treino, teste, classe_treino, classe_teste = train_test_split(bag_of_words,
                                                              texto[coluna_classificacao],
                                                              random_state = 45)
    regressao_logistica = LogisticRegression()
    regressao_logistica.fit(treino, classe_treino)
    return regressao_logistica.score(treino, classe_treino)

print(classifica_texto(resenha, 'text_pt', 'classificacao'))

!pip install WordCloud

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

from wordcloud import WordCloud

palavras = ' '.join([text for text in resenha.text_pt])

palavras_worldcloud = WordCloud(width = 800, height = 500,
                                max_font_size = 110, 
                                collocations = False).generate(palavras) 
                                #determina o tamanho de onde as palavras serao distribuidas, 
                                #nao o tamanho da imagem

import matplotlib.pyplot as plt

plt.figure(figsize=(10,7))
plt.imshow(palavras_worldcloud, interpolation='bilinear')
plt.axis('off')
plt.show